import logging
import asyncio
import nest_asyncio
import unicodedata
import re
import sys
import os
from functools import wraps
from supabase.client import create_client, Client
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message, User # User роР роЗроЩрпНроХрпБ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from rapidfuzz import process
from dotenv import load_dotenv
import base64 # payload роР роХрпБро▒ро┐ропро╛роХрпНроХроорпН роЪрпЖропрпНроп

# .env роХрпЛрокрпНрокро┐ро▓ро┐ро░рпБроирпНродрпБ environment variables роР роПро▒рпНро▒ро╡рпБроорпН
load_dotenv()
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Environment variables роРрокрпН рокрпЖро▒ро╡рпБроорпН
TOKEN = os.getenv("TOKEN")
admin_ids_str = os.getenv("ADMIN_IDS", "")
admin_ids = set(map(int, filter(None, admin_ids_str.split(","))))
PRIVATE_CHANNEL_LINK = os.getenv("PRIVATE_CHANNEL_LINK")
BOT_USERNAME = os.getenv("BOT_USERNAME") # роЙроЩрпНроХро│рпН Bot-роЗройрпН Username роР .env роЗро▓рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН (роО.роХро╛: MY_BOT_USERNAME=SK_1_bot)

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Supabase client роР роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logging.info(f"тЬЕ Supabase URL: {SUPABASE_URL}")
    logging.info(f"тЬЕ Supabase KEY: {SUPABASE_KEY[:5]}...")
except Exception as e:
    logging.error(f"тЭМ Supabase client роЙро░рпБро╡ро╛роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ: {e}")
    sys.exit(1)

# Global variable for user files (for addmovie process)
user_files = {}

# --- Utility Functions ---

# --- Extract title from filename ---
def extract_title(filename: str) -> str:
    """роГрокрпИро▓рпН рокрпЖропро░ро┐ро▓ро┐ро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯродрпН родро▓рпИрокрпНрокрпИрокрпН рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХро┐ро▒родрпБ."""
    filename = re.sub(r"@\S+", "", filename)
    filename = re.sub(r"\b(480p|720p|1080p|x264|x265|HEVC|HDRip|WEBRip|AAC|10bit|DS4K|UNTOUCHED|mkv|mp4|HD|HQ|Tamil|Telugu|Hindi|English|Dubbed|Org|Original|Proper)\b", "", filename, flags=re.IGNORECASE)
    filename = re.sub(r"[\[\]\(\)\{\}]", " ", filename)
    filename = re.sub(r"\s+", " ", filename).strip()

    match = re.search(r"([a-zA-Z\s]+)(?:\(?)(20\d{2})(?:\)?)", filename)
    if match:
        title = f"{match.group(1).strip()} ({match.group(2)})"
        return title

    title = re.split(r"[-0-9]", filename)[0].strip()
    return title

# --- Clean title for DB storage and comparison ---
def clean_title(title: str) -> str:
    """
    родро┐ро░рпИрокрпНрокроЯродрпН родро▓рпИрокрпНрокрпИ роЪрпБродрпНродроорпН роЪрпЖропрпНродрпБ, lowercase роЖроХ рооро╛ро▒рпНро▒рпБроХро┐ро▒родрпБ.
    роЗродрпБ роЪрпЗрооро┐роХрпНроХрпБроорпНрокрпЛродрпБроорпН, родрпЗроЯрпБроорпНрокрпЛродрпБроорпН, роирпАроХрпНроХрпБроорпНрокрпЛродрпБроорпН роТро░рпЗ рооро╛родро┐ро░ро┐ропро╛рой родро▓рпИрокрпНрокрпИ роЙро▒рпБродро┐ роЪрпЖропрпНроХро┐ро▒родрпБ.
    """
    cleaned = title.lower()
    cleaned = ''.join(c for c in cleaned if unicodedata.category(c)[0] not in ['S', 'C'])
    cleaned = re.sub(r'[^\w\s\(\)]', '', cleaned)
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    return cleaned

# --- Load movies from Supabase ---
def load_movies_data():
    """Supabase роЗро▓ро┐ро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯродрпН родро░ро╡рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("*").execute()
        movies = response.data or []
        movies_data = {}
        for movie in movies:
            cleaned_title = clean_title(movie['title'])
            movies_data[cleaned_title] = {
                'poster_url': movie['poster_url'],
                'files': {
                    '480p': movie['file_480p'],
                    '720p': movie['file_720p'],
                    '1080p': movie['file_1080p'],
                }
            }
        logging.info(f"тЬЕ {len(movies_data)} родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│рпН Supabase роЗро▓ро┐ро░рпБроирпНродрпБ роПро▒рпНро▒рокрпНрокроЯрпНроЯрой.")
        return movies_data
    except Exception as e:
        logging.error(f"тЭМ Supabase роЗро▓ро┐ро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯродрпН родро░ро╡рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ: {e}")
        return {}

# movies_data роР global роЖроХ роПро▒рпНро▒ро╡рпБроорпН
movies_data = load_movies_data()

# --- Decorator for restricted commands ---
def restricted(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in admin_ids:
            await update.message.reply_text("тЭМ роЗроирпНрод command admins роороЯрпНроЯрпБроорпЗ рокропройрпНрокроЯрпБродрпНрод роорпБроЯро┐ропрпБроорпН")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# --- Save movie to Supabase ---
def save_movie_to_db(title: str, poster_id: str, file_ids: list) -> bool:
    """родро┐ро░рпИрокрпНрокроЯродрпН родро░ро╡рпИ Supabase роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЪрпЗрооро┐роХрпНроХро┐ро▒родрпБ."""
    try:
        cleaned_title_for_db = clean_title(title)
        logging.info(f"Saving movie with cleaned title: '{cleaned_title_for_db}'")

        data = {
            "title": cleaned_title_for_db,
            "poster_url": poster_id,
            "file_480p": file_ids[0] if len(file_ids) > 0 else None,
            "file_720p": file_ids[1] if len(file_ids) > 1 else None,
            "file_1080p": file_ids[2] if len(file_ids) > 2 else None,
            "uploaded_at": datetime.utcnow().isoformat()
        }
        response = supabase.table("movies").insert(data).execute()
        
        if response.data:
            logging.info(f"тЬЕ родро┐ро░рпИрокрпНрокроЯроорпН '{cleaned_title_for_db}' Supabase-ро▓рпН роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ.")
            return True
        else:
            logging.error(f"тЭМ Supabase Insert родрпЛро▓рпНро╡ро┐ропроЯрпИроирпНродродрпБ, родро░ро╡рпБ роЗро▓рпНро▓рпИ: {response.status_code}")
            if response.error: # рокро┐ро┤рпИропрпИ ро▓ро╛роХрпН роЪрпЖропрпНропро╡рпБроорпН
                logging.error(f"Supabase Insert error details: {response.error}")
            return False
    except Exception as e:
        logging.error(f"тЭМ Supabase Insert рокро┐ро┤рпИ: {e}")
        return False
    
# --- Calculate time difference for status ---
def time_diff(past_time: datetime) -> str:
    """роХроЯроирпНрод роирпЗро░родрпНродро┐ро▒рпНроХрпБроорпН роЗрокрпНрокрпЛродрпИроп роирпЗро░родрпНродро┐ро▒рпНроХрпБроорпН роЙро│рпНро│ ро╡ро┐родрпНродро┐ропро╛роЪродрпНродрпИроХрпН роХрогроХрпНроХро┐роЯрпБроХро┐ро▒родрпБ."""
    now = datetime.utcnow()
    diff = now - past_time

    seconds = diff.total_seconds()
    minutes = seconds / 60
    hours = minutes / 60
    days = hours / 24

    if seconds < 60:
        return f"{int(seconds)} seconds ago"
    elif minutes < 60:
        return f"{int(minutes)} minutes ago"
    elif hours < 24:
        return f"{int(hours)} hours ago"
    else:
        return f"{int(days)} days ago"

# --- Delete messages after 10 minutes ---
async def delete_after_delay(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    """роТро░рпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роХро╛ро▓родрпНродро┐ро▒рпНроХрпБрокрпН рокро┐ро▒роХрпБ Telegram роорпЖроЪрпЗроЬрпИ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    await asyncio.sleep(600) # 10 minutes delay
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logging.info(f"Message {message_id} in chat {chat_id} deleted after delay.")
    except Exception as e:
        logging.warning(f"Error deleting message {message_id} in chat {chat_id}: {e}")

# --- Send movie poster with resolution buttons (MODIFIED for Deep Linking) ---
async def send_movie_poster(message: Message, movie_name_key: str, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯ рокрпЛро╕рпНроЯро░рпИ 'рокроЯродрпНродрпИрокрпН рокрпЖро▒' рокроЯрпНроЯройрпБроЯройрпН роЕройрпБрокрпНрокрпБроХро┐ро▒родрпБ, роЗродрпБ родройро┐рокрпНрокроЯрпНроЯ Chat-роХрпНроХрпБ Deep Link роЪрпЖропрпНропрпБроорпН."""
    movie = movies_data.get(movie_name_key)
    if not movie:
        await message.reply_text("тЭМ рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ роЕро▓рпНро▓родрпБ рокрпЛро╕рпНроЯро░рпН роЗро▓рпНро▓рпИ.")
        return

    # роТро╡рпНро╡рпКро░рпБ Resolution-роХрпНроХрпБроорпН родройро┐родрпНродройро┐ Deep Link payload роР роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН
    # payload: "movie_name_key|resolution"
    # base64 роХрпБро▒ро┐ропро╛роХрпНроХроорпН, payload роЗро▓рпН роЙро│рпНро│ роЪро┐ро▒рокрпНрокрпБ роОро┤рпБродрпНродрпБроХрпНроХро│рпИродрпН родро╡ро┐ро░рпНроХрпНроХ
    payload_480p = base64.urlsafe_b64encode(f"{movie_name_key}|480p".encode()).decode()
    payload_720p = base64.urlsafe_b64encode(f"{movie_name_key}|720p".encode()).decode()
    payload_1080p = base64.urlsafe_b64encode(f"{movie_name_key}|1080p".encode()).decode()

    # Deep Link URL роР роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН
    # t.me/YourBotUsername?start=payload
    bot_link_480p = f"https://t.me/{BOT_USERNAME}?start={payload_480p}"
    bot_link_720p = f"https://t.me/{BOT_USERNAME}?start={payload_720p}"
    bot_link_1080p = f"https://t.me/{BOT_USERNAME}?start={payload_1080p}"

    caption = (
        f"ЁЯОм *{movie_name_key.title()}*\n\n"
        f"ЁЯСЙ <a href='{PRIVATE_CHANNEL_LINK}'>SK Movies Updates (News)ЁЯФФ</a> - рокрпБродро┐роп рокроЯроЩрпНроХро│рпН, роЕрокрпНроЯрпЗроЯрпНроХро│рпН роЕройрпИродрпНродрпБроорпН роЗроЩрпНроХрпЗ роХро┐роЯрпИроХрпНроХрпБроорпН. Join рокрогрпНрогрпБроЩрпНроХ!"
    )

    # Inline Keyboard with buttons linking to the bot's private chat
    keyboard = [
        [
            InlineKeyboardButton("480p рокрпЖро▒", url=bot_link_480p),
            InlineKeyboardButton("720p рокрпЖро▒", url=bot_link_720p),
            InlineKeyboardButton("1080p рокрпЖро▒", url=bot_link_1080p),
        ]
    ]

    try:
        sent = await message.reply_photo(
            movie["poster_url"],
            caption=caption,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        asyncio.create_task(delete_after_delay(context, message.chat_id, sent.message_id))
        logging.info(f"Sent movie poster with deep links for '{movie_name_key}' to chat {message.chat_id}.")
    except Exception as e:
        logging.error(f"тЭМ рокрпЛро╕рпНроЯро░рпН роЕройрпБрокрпНрок рокро┐ро┤рпИ: {e}")
        await message.reply_text("тЪая╕П рокрпЛро╕рпНроЯро░рпН роЕройрпБрокрпНрок роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- User Tracking Logic (reusable function) ---
async def track_user(user: User) -> bool: # Returns True if new user, False if existing
    """User-роР Database-роЗро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ роЕро▓рпНро▓родрпБ роПро▒рпНроХройро╡рпЗ роЗро░рпБроирпНродро╛ро▓рпН ро▓ро╛роХрпН роЪрпЖропрпНроХро┐ро▒родрпБ."""
    user_id = user.id
    try:
        response = supabase.table("users").select("user_id").eq("user_id", user_id).limit(1).execute()
        
        if not response.data: # User Database-роЗро▓рпН роЗро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН, роЕродрпИроЪрпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН
            user_data = {
                "user_id": user_id,
                "username": user.username if user.username else None, # Username роЗро▓рпНро▓ро╛род User-роХро│рпИропрпБроорпН роХрпИропро╛ро│ро╡рпБроорпН
                "first_name": user.first_name if user.first_name else None, # First Name роЗро▓рпНро▓ро╛род User-роХро│рпИропрпБроорпН роХрпИропро╛ро│ро╡рпБроорпН
                "last_name": user.last_name if user.last_name else None, # Last Name роЗро▓рпНро▓ро╛род User-роХро│рпИропрпБроорпН роХрпИропро╛ро│ро╡рпБроорпН
                "joined_at": datetime.utcnow().isoformat()
            }
            insert_response = supabase.table("users").insert(user_data).execute()
            if insert_response.data:
                logging.info(f"тЬЕ рокрпБродро┐роп User рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ: {user_id}")
                return True # New user
            else:
                error_details = insert_response.error if insert_response.error else \
                                insert_response.postgrest_error if hasattr(insert_response, 'postgrest_error') else "Unknown error"
                logging.error(f"тЭМ User рокродро┐ро╡рпБ роЪрпЖропрпНроп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ: {user_id}, Error: {error_details}")
                return False # Error, treat as not new for now
        else:
            logging.info(f"User {user_id} роПро▒рпНроХройро╡рпЗ рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.")
            return False # Existing user

    except Exception as e:
        logging.error(f"тЭМ User рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроорпН рокро┐ро┤рпИ: {e}")
        return False # Error, treat as not new for now

# --- General Message Tracker (роЕройрпИродрпНродрпБ User роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпИропрпБроорпН рокродро┐ро╡рпБ роЪрпЖропрпНроп) ---
async def general_message_tracker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    роЕройрпИродрпНродрпБ User Update-роХро│рпИропрпБроорпН (Commands, Text, Photos, Callbacks) рокродро┐ро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ.
    effective_user роЗро▓рпНро▓ро╛род Update-роХро│рпИ роХрпИропро╛ро│рпБроХро┐ро▒родрпБ.
    """
    # effective_user роЗро░рпБроХрпНроХро┐ро▒родро╛ роОройрпНро▒рпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
    if update.effective_user:
        # ро▓ро╛роХро┐роЩрпНроХро┐ро▒рпНроХро╛рой Update ро╡роХрпИропрпИ рокро╛родрпБроХро╛рокрпНрокро╛роХ родрпАро░рпНрооро╛ройро┐роХрпНроХро╡рпБроорпН
        log_update_type = "Unknown"
        
        if update.message:
            if hasattr(update.message, 'content_type'):
                log_update_type = update.message.content_type
            elif update.message.text:
                log_update_type = "text"
            elif update.message.photo:
                log_update_type = "photo"
            elif update.message.document:
                log_update_type = "document"
            elif update.message.video:
                log_update_type = "video"
            elif update.message.audio:
                log_update_type = "audio"
            elif update.message.sticker:
                log_update_type = "sticker"
            elif update.message.voice:
                log_update_type = "voice"
            elif update.message.contact:
                log_update_type = "contact"
            elif update.message.location:
                log_update_type = "location"
            elif update.message.poll:
                log_update_type = "poll"
            elif update.message.game:
                log_update_type = "game"
            else:
                log_update_type = "message_other"

        elif update.callback_query:
            log_update_type = "CallbackQuery"
        elif update.inline_query:
            log_update_type = "InlineQuery"
        elif update.chosen_inline_result:
            log_update_type = "ChosenInlineResult"
        elif update.channel_post:
            log_update_type = "ChannelPost"
        elif update.edited_channel_post:
            log_update_type = "EditedChannelPost"

        logging.info(f"General tracker processing update from user: {update.effective_user.id}. Update type: {log_update_type}.")
        await track_user(update.effective_user) # роЕройрпИродрпНродрпБ Message-роХро│рпБроХрпНроХрпБроорпН User роРрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНроп
    else:
        logging.info(f"Received update without effective_user. Update ID: {update.update_id}. This update will not register a user.")

# --- /start command (MODIFIED for Deep Linking) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start роХроЯрпНроЯро│рпИроХрпНроХрпБ рокродро┐ро▓ро│ро┐роХрпНроХро┐ро▒родрпБ рооро▒рпНро▒рпБроорпН Deep Link payload роРроХрпН роХрпИропро╛ро│рпБроХро┐ро▒родрпБ."""
    user = update.effective_user
    logging.info(f"Received /start command from user: {user.id}. Args: {context.args}")

    is_new_user = await track_user(user) # User-роР Database-роЗро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН рооро▒рпНро▒рпБроорпН рокрпБродро┐роп User роЖ роОрой роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН

    # Deep Link payload роРроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
    if context.args and len(context.args) > 0:
        encoded_payload = context.args[0]
        try:
            decoded_payload = base64.urlsafe_b64decode(encoded_payload).decode()
            logging.info(f"Decoded payload: {decoded_payload}")
            
            # payload: "movie_name_key|resolution"
            if "|" in decoded_payload:
                movie_name_key, res = decoded_payload.split("|", 1) # Split only once
                logging.info(f"Attempting to send movie '{movie_name_key}' with resolution '{res}' to user {user.id}.")
                
                # рокрпБродро┐роп User роОройрпНро▒ро╛ро▓рпН, роорпБродро▓ро┐ро▓рпН /start ро╡ро░ро╡рпЗро▒рпНрокрпБ
                if is_new_user:
                    await context.bot.send_message(
                        chat_id=user.id,
                        text="ЁЯОм SK Movies Bot-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!\n\nроЗроЩрпНроХрпБ роирпАроЩрпНроХро│рпН родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│рпИ родрпЗроЯро▓ро╛роорпН рооро▒рпНро▒рпБроорпН рокрпЖро▒ро▓ро╛роорпН."
                    )
                    await asyncio.sleep(1) # роТро░рпБ роЪро┐ро▒ро┐роп родро╛роородроорпН

                movie = movies_data.get(movie_name_key)
                if movie and movie['files'].get(res):
                    file_id_to_send = movie['files'].get(res)
                    caption = (
                        f"ЁЯОм *{movie_name_key.title()}*\n\n"
                        f"ЁЯСЙ <a href='{PRIVATE_CHANNEL_LINK}'>SK Movies Updates (News)ЁЯФФ</a> - рокрпБродро┐роп рокроЯроЩрпНроХро│рпН, роЕрокрпНроЯрпЗроЯрпНроХро│рпН роЕройрпИродрпНродрпБроорпН роЗроЩрпНроХрпЗ роХро┐роЯрпИроХрпНроХрпБроорпН.\nJoin рокрогрпНрогрпБроЩрпНроХ!\n\n"
                        f"тЪая╕П роЗроирпНрод File 10 роиро┐рооро┐роЯроЩрпНроХро│ро┐ро▓рпН роирпАроХрпНроХрокрпНрокроЯрпБроорпН. родропро╡рпБроЪрпЖропрпНродрпБ роЗроирпНрод File роР роЙроЩрпНроХро│рпН saved messages роХрпНроХрпБ роЕройрпБрокрпНрокро┐ ро╡рпИропрпБроЩрпНроХро│рпН."
                    )
                    sent_msg = await context.bot.send_document(
                        chat_id=user.id, # родройро┐рокрпНрокроЯрпНроЯ Chat-роХрпНроХрпБ роЕройрпБрокрпНрокро╡рпБроорпН
                        document=file_id_to_send,
                        caption=caption,
                        parse_mode="HTML"
                    )
                    logging.info(f"File sent successfully to user {user.id} for movie '{movie_name_key}' resolution '{res}'.")
                    await context.bot.send_message(
                        chat_id=user.id,
                        text="тЬЕ роХрпЛрокрпНрокрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ."
                    )
                    asyncio.create_task(delete_after_delay(context, sent_msg.chat.id, sent_msg.message_id))
                else:
                    logging.warning(f"Movie or file not found for deep link: {movie_name_key}, {res}")
                    await context.bot.send_message(
                        chat_id=user.id,
                        text="тЭМ роирпАроЩрпНроХро│рпН роХрпЛро░ро┐роп рокроЯроорпН роЕро▓рпНро▓родрпБ Resolution роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ."
                    )
            else:
                logging.warning(f"Invalid deep link payload format: {decoded_payload}")
                await context.bot.send_message(
                    chat_id=user.id,
                    text="тЪая╕П родро╡ро▒ро╛рой роХрпЛро░ро┐роХрпНроХрпИ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
                )
        except Exception as e:
            logging.error(f"тЭМ Deep link payload роР decode роЪрпЖропрпНроп роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ: {e}", exc_info=True)
            await context.bot.send_message(
                chat_id=user.id,
                text="тЪая╕П роХрпЛро░ро┐роХрпНроХрпИропрпИроЪрпН роЪрпЖропро▓рпНрокроЯрпБродрпНрод роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ."
            )
    else:
        # payload роЗро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН, ро╡ро┤роХрпНроХрооро╛рой /start ро╡ро░ро╡рпЗро▒рпНрокрпБ
        await update.message.reply_text("ЁЯОм родропро╡рпБроЪрпЖропрпНродрпБ родро┐ро░рпИрокрпНрокроЯродрпНродро┐ройрпН рокрпЖропро░рпИ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН!")
        logging.info(f"Regular /start reply sent to user: {user.id}")

# --- /totalusers command ---
@restricted # Admins роороЯрпНроЯрпБроорпЗ рокро╛ро░рпНроХрпНроХ роорпБроЯро┐ропрпБроорпН
async def total_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯ роорпКродрпНрод User-роХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /totalusers command from user: {update.effective_user.id}.")
    try:
        response = supabase.table("users").select("user_id", count="exact").execute()
        total_users = response.count or 0
        logging.info(f"Total registered users: {total_users}. Sending reply.")
        await update.message.reply_text(f"ЁЯУК роорпКродрпНрод рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯ User-роХро│рпН: {total_users}")
    except Exception as e:
        logging.error(f"тЭМ роорпКродрпНрод User-роХро│рпИрокрпН рокрпЖро▒ рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ User роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        
# --- /addmovie command ---
@restricted
async def addmovie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокрпБродро┐роп родро┐ро░рпИрокрпНрокроЯродрпНродрпИроЪрпН роЪрпЗро░рпНроХрпНроХрпБроорпН роЪрпЖропро▓рпНроорпБро▒рпИропрпИродрпН родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ."""
    user_id = update.message.from_user.id
    user_files[user_id] = {"poster": None, "movies": []}
    await update.message.reply_text("рокрпЛро╕рпНроЯро░рпН рооро▒рпНро▒рпБроорпН 3 movie files (480p, 720p, 1080p) роЕройрпБрокрпНрокро╡рпБроорпН.")

# --- Save incoming files (for addmovie process) ---
async def save_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокрпЛро╕рпНроЯро░рпН рооро▒рпНро▒рпБроорпН роорпВро╡ро┐ роГрокрпИро▓рпНроХро│рпИрокрпН рокрпЖро▒рпНро▒рпБ Supabase-ро▓рпН роЪрпЗрооро┐роХрпНроХро┐ро▒родрпБ."""
    message = update.message
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in user_files or (user_files[user_id]["poster"] is None and not message.photo and not message.document):
        await message.reply_text("тЭЧ роорпБродро▓ро┐ро▓рпН /addmovie роЕройрпБрокрпНрокро╡рпБроорпН.")
        return

    # Poster
    if message.photo:
        file_id = message.photo[-1].file_id
        user_files[user_id]["poster"] = file_id
        await message.reply_text("ЁЯЦ╝я╕П Poster received.")
        asyncio.create_task(delete_after_delay(context, chat_id, message.message_id))
        return

    # Movie files (Telegram file_id-ропрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН)
    if message.document:
        if len(user_files[user_id]["movies"]) >= 3:
            await message.reply_text("тЭЧ роорпВройрпНро▒рпБ movie files роПро▒рпНроХройро╡рпЗ рокрпЖро▒рпНро▒рпБро╡ро┐роЯрпНроЯрпЗройрпН.")
            return

        movie_file_id = message.document.file_id
        movie_file_name = message.document.file_name

        user_files[user_id]["movies"].append({
            "file_id": movie_file_id,
            "file_name": movie_file_name
        })

        await message.reply_text(
            f"ЁЯОе Movie file {len(user_files[user_id]['movies'])} received.\nЁЯУВ `{movie_file_name}`",
            parse_mode="Markdown"
        )
        asyncio.create_task(delete_after_delay(context, chat_id, message.message_id))

    # If all files received, save to DB
    if user_files[user_id]["poster"] and len(user_files[user_id]["movies"]) == 3:
        poster_id = user_files[user_id]["poster"]
        movies_list = user_files[user_id]["movies"]
        
        telegram_file_ids_for_db = [m["file_id"] for m in movies_list] 
        
        raw_title = extract_title(movies_list[0]["file_name"])
        cleaned_title = clean_title(raw_title)

        saved = save_movie_to_db(cleaned_title, poster_id, telegram_file_ids_for_db) 
        if saved:
            global movies_data
            movies_data = load_movies_data()
            await message.reply_text(f"тЬЕ Movie saved as *{cleaned_title.title()}*.", parse_mode="Markdown")
        else:
            await message.reply_text("тЭМ DB-ро▓рпН роЪрпЗрооро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

        user_files[user_id] = {"poster": None, "movies": []}

# --- Send movie on text message (search) ---
async def send_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокропройро░ро┐ройрпН родрпЗроЯро▓рпН ро╡ро┐ройро╡ро▓рпБроХрпНроХрпБрокрпН рокродро┐ро▓ро│ро┐роХрпНроХро┐ро▒родрпБ."""
    logging.info(f"Received movie search '{update.message.text}' from user: {update.effective_user.id}. Attempting to process.")
    search_query = update.message.text.strip()

    global movies_data
    movies_data = load_movies_data()

    if not movies_data:
        logging.info("Movies data is empty or could not be loaded. Sending error message.")
        await update.message.reply_text("роЯрпЗроЯрпНроЯро╛рокрпЗро╕рпН роХро╛ро▓ро┐ропро╛роХ роЙро│рпНро│родрпБ роЕро▓рпНро▓родрпБ роПро▒рпНро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. рокро┐ройрпНройро░рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
        return

    cleaned_search_query = clean_title(search_query)

    movie_titles = list(movies_data.keys())
    
    good_matches = process.extract(cleaned_search_query, movie_titles, score_cutoff=80)

    if not good_matches:
        broad_suggestions = process.extract(cleaned_search_query, movie_titles, limit=5, score_cutoff=60)
        if broad_suggestions:
            keyboard = [[InlineKeyboardButton(m[0].title(), callback_data=f"movie|{m[0]}")] for m in broad_suggestions]
            logging.info("No good matches found. Sending broad suggestions.")
            await update.message.reply_text(
                "тЪая╕П роирпАроЩрпНроХро│рпН роЗроирпНрод рокроЯроЩрпНроХро│ро┐ро▓рпН роПродро╛ро╡родрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпБроХро┐ро▒рпАро░рпНроХро│ро╛?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            logging.info("No movie found for the search query. Sending 'not found' message.")
            await update.message.reply_text("тЭМ рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ!")
    elif len(good_matches) == 1 and good_matches[0][1] >= 95:
        matched_title_key = good_matches[0][0]
        logging.info(f"Direct exact match found for search: '{matched_title_key}'. Sending poster with deep link.")
        await send_movie_poster(update.message, matched_title_key, context)
    else:
        keyboard = [[InlineKeyboardButton(m[0].title(), callback_data=f"movie|{m[0]}")] for m in good_matches]
        logging.info("Multiple good matches found. Sending suggestions.")
        await update.message.reply_text(
            "тЪая╕П роирпАроЩрпНроХро│рпН роЗроирпНрод рокроЯроЩрпНроХро│ро┐ро▓рпН роПродро╛ро╡родрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпБроХро┐ро▒рпАро░рпНроХро│ро╛?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# --- Handle movie button click from suggestions (MODIFIED to use send_movie_poster) ---
async def movie_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯройрпН роХро┐ро│ро┐роХрпНроХрпБроХро│рпИроХрпН роХрпИропро╛ро│рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received movie button click from user: {update.effective_user.id}. Query data: {update.callback_query.data}. Attempting to send poster with deep link.")
    query = update.callback_query
    await query.answer() # Callback query роР роЙроЯройроЯро┐ропро╛роХ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН
    data = query.data
    
    if "|" not in data:
        logging.warning(f"Invalid callback data received: {data}")
        await query.message.reply_text("родро╡ро▒ро╛рой роХрпЛро░ро┐роХрпНроХрпИ.")
        return

    prefix, movie_name_key = data.split("|", 1) # Split only once

    if movie_name_key in movies_data:
        logging.info(f"Movie button clicked for '{movie_name_key}'. Sending poster with deep link.")
        # роЗрокрпНрокрпЛродрпБ send_movie_poster роРрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН, роЗродрпБ Deep Link рокроЯрпНроЯройрпНроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроорпН
        await send_movie_poster(query.message, movie_name_key, context)
    else:
        logging.warning(f"Movie '{movie_name_key}' not found for button click.")
        await query.message.reply_text("тЭМ рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ!")

# --- Pagination helpers ---
def get_total_movies_count() -> int:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        return response.count if response.count is not None else 0
    except Exception as e:
        logging.error(f"тЭМ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯ роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒ рокро┐ро┤рпИ: {e}")
        return 0

def load_movies_page(limit: int = 20, offset: int = 0) -> list:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓ро┐ройрпН роТро░рпБ рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("title").order("title", desc=False).range(offset, offset + limit - 1).execute()
        movies = response.data or []
        return [m['title'] for m in movies]
    except Exception as e:
        logging.error(f"тЭМ родро┐ро░рпИрокрпНрокроЯрокрпН рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ рокро┐ро┤рпИ: {e}")
        return []

# --- /movielist command ---
@restricted
async def movielist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /movielist command from user: {update.effective_user.id}.")
    user_id = update.message.from_user.id
    logging.info(f"User {user_id} requested /movielist command.") 

    page = 1
    if context.args:
        try:
            page = int(context.args[0])
            if page < 1:
                page = 1
        except ValueError:
            page = 1

    limit = 30
    offset = (page - 1) * limit

    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    logging.info(f"Movielist details - Page: {page}, Offset: {offset}, Total Movies: {total_movies}, Total Pages: {total_pages}, Movies on page: {len(movies)}")

    if not movies:
        logging.info("Movielist is empty for this page. Sending 'no movies' message.")
        await update.message.reply_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Sending movielist page {page} to user {user_id}.")
    await update.message.reply_text(text, reply_markup=reply_markup)

# movielist pagination callback
async def movielist_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпН рокроХрпНроХро╡ро╛роЯрпНроЯрпБ роХро┐ро│ро┐роХрпНроХрпБроХро│рпИроХрпН роХрпИропро╛ро│рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received movielist callback from user: {update.effective_user.id}. Query data: {update.callback_query.data}.")
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("movielist_"):
        logging.warning(f"Invalid movielist callback data: {data}")
        return

    page = int(data.split("_")[1])

    limit = 30
    offset = (page - 1) * limit
    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    if not movies:
        logging.info(f"Movielist is empty for page {page} in callback. Editing message.")
        await query.message.edit_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Editing movielist message to page {page} for user {update.effective_user.id}.")
    await query.message.edit_text(text, reply_markup=reply_markup)

# --- /status command ---
@restricted
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокро╛роЯрпНроЯро┐ройрпН роиро┐ро▓рпИ рооро▒рпНро▒рпБроорпН роЯрпЗроЯрпНроЯро╛рокрпЗро╕рпН родроХро╡ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /status command from user: {update.effective_user.id}.")
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        total_movies = response.count or 0

        db_size_mb = "N/A" 

        last_movie_resp = supabase.table("movies").select("title", "uploaded_at").order("id", desc=True).limit(1).execute()
        last = last_movie_resp.data[0] if last_movie_resp.data else None
        if last:
            last_title = last['title']
            last_upload_time = datetime.fromisoformat(last['uploaded_at'])
            time_ago = time_diff(last_upload_time)
        else:
            last_title = "None"
            time_ago = "N/A"

        text = (
            f"ЁЯУК Bot Status:\n"
            f"тАв Total Movies: {total_movies}\n"
            f"тАв Database Size: {db_size_mb}\n"
            f"тАв Last Upload: \"{last_title.title()}\" тАУ {time_ago}"
        )
        logging.info(f"Sending status info to user {update.effective_user.id}.")
        await update.message.reply_text(text)
    except Exception as e:
        logging.error(f"тЭМ Status рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ Status info рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- /adminpanel command ---
@restricted
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """роЕроЯрпНрооро┐ройрпН рокрпЗройро▓рпН родроХро╡ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /adminpanel command from user: {update.effective_user.id}.")
    admin_list = "\n".join([f"ЁЯСд {admin_id}" for admin_id in admin_ids])
    logging.info(f"Sending admin panel info to user {update.effective_user.id}.")
    await update.message.reply_text(f"ЁЯЫая╕П *Admin Panel*\n\nЁЯУЛ *Admin IDs:*\n{admin_list}", parse_mode='Markdown')

# --- /addadmin <id> command ---
@restricted
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокрпБродро┐роп роЕроЯрпНрооро┐ройрпИроЪрпН роЪрпЗро░рпНроХрпНроХро┐ро▒родрпБ."""
    logging.info(f"Received /addadmin command from user: {update.effective_user.id}. Args: {context.args}")
    if not context.args:
        await update.message.reply_text("тЪая╕П Usage: /addadmin <user_id>")
        return

    try:
        new_admin_id = int(context.args[0])
        if new_admin_id in admin_ids:
            logging.info(f"User {new_admin_id} is already an admin.")
            await update.message.reply_text("тЪая╕П роЗроирпНрод user роПро▒рпНроХройро╡рпЗ роТро░рпБ admin.")
        else:
            admin_ids.add(new_admin_id)
            logging.info(f"Added new admin: {new_admin_id}")
            await update.message.reply_text(f"тЬЕ рокрпБродро┐роп admin роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {new_admin_id}")
    except ValueError:
        logging.warning(f"Invalid user ID provided for /addadmin: {context.args[0]}")
        await update.message.reply_text("тЪая╕П Invalid user ID. родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роОрогрпНрогрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.")

# --- /removeadmin <id> command ---
@restricted
async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """роЕроЯрпНрооро┐ройрпИ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /removeadmin command from user: {update.effective_user.id}. Args: {context.args}")
    if not context.args:
        await update.message.reply_text("тЪая╕П Usage: /removeadmin <user_id>")
        return

    try:
        rem_admin_id = int(context.args[0])
        if rem_admin_id in admin_ids:
            if len(admin_ids) == 1:
                logging.warning(f"Attempted to remove last admin: {rem_admin_id}")
                await update.message.reply_text("тЪая╕П роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН роТро░рпБ admin роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.")
            else:
                admin_ids.remove(rem_admin_id)
                logging.info(f"Removed admin: {rem_admin_id}")
                await update.message.reply_text(f"тЬЕ Admin роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {rem_admin_id}")
        else:
            logging.info(f"User {rem_admin_id} is not in admin list.")
            await update.message.reply_text("тЭМ User admin рокроЯрпНроЯро┐ропро▓ро┐ро▓рпН роЗро▓рпНро▓рпИ.")
    except ValueError:
        logging.warning(f"Invalid user ID provided for /removeadmin: {context.args[0]}")
        await update.message.reply_text("тЪая╕П Invalid user ID. родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роОрогрпНрогрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.")

# --- /edittitle command ---
@restricted
async def edittitle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯродрпН родро▓рпИрокрпНрокрпИ рооро╛ро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /edittitle command from user: {update.effective_user.id}. Args: {context.args}")
    args = context.args
    logging.info(f"Edittitle args: {args}")
    if len(args) < 1 or "|" not in " ".join(args):
        await update.message.reply_text("тЪая╕П Usage: `/edittitle <old title> | <new title>`", parse_mode="Markdown")
        return

    full_args = " ".join(args)
    old_title_raw, new_title_raw = map(lambda x: x.strip(), full_args.split("|", 1))
    
    cleaned_old_title = clean_title(old_title_raw)
    cleaned_new_title = clean_title(new_title_raw)

    logging.info(f"Edittitle parsed - Old Cleaned: '{cleaned_old_title}' (Raw: '{old_title_raw}'), New Cleaned: '{cleaned_new_title}' (Raw: '{new_title_raw}')")

    try:
        response = supabase.table("movies").update({"title": cleaned_new_title}).eq("title", cleaned_old_title).execute()
        
        logging.info(f"Supabase update response data: {response.data}")
        if response.error: # Changed from postgrest_error to error
            logging.error(f"Supabase update error details: {response.error}")
        else:
            logging.info("Supabase update operation completed without error.")

        if response.data:
            global movies_data
            movies_data = load_movies_data()
            logging.info(f"Title updated successfully for '{old_title_raw}' to '{new_title_raw}'.")
            await update.message.reply_text(f"тЬЕ *{old_title_raw.title()}* роЗройрпН родро▓рпИрокрпНрокрпБ, *{new_title_raw.title()}* роЖроХ рооро╛ро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ.", parse_mode="Markdown")
        else:
            logging.info(f"Movie '{old_title_raw}' not found for title edit.")
            await update.message.reply_text("тЭМ роЕроирпНродрокрпН рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокро┤рпИроп рокрпЖропро░рпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН.")
    except Exception as e:
        logging.error(f"тЭМ родро▓рпИрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐рокрпНрокрпБ рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ родро▓рпИрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        
# --- /deletemovie command ---
@restricted
async def deletemovie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯродрпНродрпИ роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /deletemovie command from user: {update.effective_user.id}. Args: {context.args}")
    args = context.args
    if not args:
        await update.message.reply_text("тЪая╕П Usage: `/deletemovie <movie name>`", parse_mode="Markdown")
        return

    title_raw = " ".join(args).strip()
    title_to_delete_cleaned = clean_title(title_raw)

    logging.info(f"Attempting to delete title: '{title_to_delete_cleaned}' (Raw: '{title_raw}')")

    try:
        # роирпАроХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХрпБроорпН роорпБройрпН, роЕроирпНродрокрпН рокроЯроорпН роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│родро╛ роОройрпНро▒рпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
        check_response = supabase.table("movies").select("title").eq("title", title_to_delete_cleaned).execute()
        
        if not check_response.data:
            logging.info(f"Movie '{title_to_delete_cleaned}' not found in DB for deletion.")
            await update.message.reply_text("тЭМ роЕроирпНродрокрпН рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокрпЖропро░рпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН.")
            return

        response = supabase.table("movies").delete().eq("title", title_to_delete_cleaned).execute()
        
        logging.info(f"Supabase delete response data: {response.data}")
        if response.error: # Changed from postgrest_error to error
            logging.error(f"Supabase delete error details: {response.error}")
        else:
            logging.info("Supabase delete operation completed without error.")

        if response.data:
            global movies_data
            movies_data = load_movies_data()
            logging.info(f"Movie '{title_raw}' deleted successfully.")
            await update.message.reply_text(f"тЬЕ *{title_raw.title()}* рокроЯродрпНродрпИ роирпАроХрпНроХро┐ро╡ро┐роЯрпНроЯрпЗройрпН.", parse_mode="Markdown")
        else:
            # роЗродрпБ рокрпКродрпБро╡ро╛роХ роироЯроХрпНроХро╛родрпБ, роПройрпЖройро┐ро▓рпН роиро╛роорпН роПро▒рпНроХройро╡рпЗ check_response роорпВро▓роорпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБро│рпНро│рпЛроорпН
            logging.error(f"Failed to delete movie '{title_raw}' despite being found.")
            await update.message.reply_text("тЭМ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ.")
    except Exception as e:
        logging.error(f"тЭМ роирпАроХрпНроХрпБродро▓рпН рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ DB-роЗро▓рпН роЗро░рпБроирпНродрпБ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- Pagination helpers ---
def get_total_movies_count() -> int:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        return response.count if response.count is not None else 0
    except Exception as e:
        logging.error(f"тЭМ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯ роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒ рокро┐ро┤рпИ: {e}")
        return 0

def load_movies_page(limit: int = 20, offset: int = 0) -> list:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓ро┐ройрпН роТро░рпБ рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("title").order("title", desc=False).range(offset, offset + limit - 1).execute()
        movies = response.data or []
        return [m['title'] for m in movies]
    except Exception as e:
        logging.error(f"тЭМ родро┐ро░рпИрокрпНрокроЯрокрпН рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ рокро┐ро┤рпИ: {e}")
        return []

# --- /movielist command ---
@restricted
async def movielist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /movielist command from user: {update.effective_user.id}.")
    user_id = update.message.from_user.id
    logging.info(f"User {user_id} requested /movielist command.") 

    page = 1
    if context.args:
        try:
            page = int(context.args[0])
            if page < 1:
                page = 1
        except ValueError:
            page = 1

    limit = 30
    offset = (page - 1) * limit

    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    logging.info(f"Movielist details - Page: {page}, Offset: {offset}, Total Movies: {total_movies}, Total Pages: {total_pages}, Movies on page: {len(movies)}")

    if not movies:
        logging.info("Movielist is empty for this page. Sending 'no movies' message.")
        await update.message.reply_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Sending movielist page {page} to user {user_id}.")
    await update.message.reply_text(text, reply_markup=reply_markup)

# movielist pagination callback
async def movielist_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпН рокроХрпНроХро╡ро╛роЯрпНроЯрпБ роХро┐ро│ро┐роХрпНроХрпБроХро│рпИроХрпН роХрпИропро╛ро│рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received movielist callback from user: {update.effective_user.id}. Query data: {update.callback_query.data}.")
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("movielist_"):
        logging.warning(f"Invalid movielist callback data: {data}")
        return

    page = int(data.split("_")[1])

    limit = 30
    offset = (page - 1) * limit
    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    if not movies:
        logging.info(f"Movielist is empty for page {page} in callback. Editing message.")
        await query.message.edit_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Editing movielist message to page {page} for user {update.effective_user.id}.")
    await query.message.edit_text(text, reply_markup=reply_markup)

# --- /status command ---
@restricted
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокро╛роЯрпНроЯро┐ройрпН роиро┐ро▓рпИ рооро▒рпНро▒рпБроорпН роЯрпЗроЯрпНроЯро╛рокрпЗро╕рпН родроХро╡ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /status command from user: {update.effective_user.id}.")
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        total_movies = response.count or 0

        db_size_mb = "N/A" 

        last_movie_resp = supabase.table("movies").select("title", "uploaded_at").order("id", desc=True).limit(1).execute()
        last = last_movie_resp.data[0] if last_movie_resp.data else None
        if last:
            last_title = last['title']
            last_upload_time = datetime.fromisoformat(last['uploaded_at'])
            time_ago = time_diff(last_upload_time)
        else:
            last_title = "None"
            time_ago = "N/A"

        text = (
            f"ЁЯУК Bot Status:\n"
            f"тАв Total Movies: {total_movies}\n"
            f"тАв Database Size: {db_size_mb}\n"
            f"тАв Last Upload: \"{last_title.title()}\" тАУ {time_ago}"
        )
        logging.info(f"Sending status info to user {update.effective_user.id}.")
        await update.message.reply_text(text)
    except Exception as e:
        logging.error(f"тЭМ Status рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ Status info рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- /adminpanel command ---
@restricted
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """роЕроЯрпНрооро┐ройрпН рокрпЗройро▓рпН родроХро╡ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /adminpanel command from user: {update.effective_user.id}.")
    admin_list = "\n".join([f"ЁЯСд {admin_id}" for admin_id in admin_ids])
    logging.info(f"Sending admin panel info to user {update.effective_user.id}.")
    await update.message.reply_text(f"ЁЯЫая╕П *Admin Panel*\n\nЁЯУЛ *Admin IDs:*\n{admin_list}", parse_mode='Markdown')

# --- /addadmin <id> command ---
@restricted
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокрпБродро┐роп роЕроЯрпНрооро┐ройрпИроЪрпН роЪрпЗро░рпНроХрпНроХро┐ро▒родрпБ."""
    logging.info(f"Received /addadmin command from user: {update.effective_user.id}. Args: {context.args}")
    if not context.args:
        await update.message.reply_text("тЪая╕П Usage: /addadmin <user_id>")
        return

    try:
        new_admin_id = int(context.args[0])
        if new_admin_id in admin_ids:
            logging.info(f"User {new_admin_id} is already an admin.")
            await update.message.reply_text("тЪая╕П роЗроирпНрод user роПро▒рпНроХройро╡рпЗ роТро░рпБ admin.")
        else:
            admin_ids.add(new_admin_id)
            logging.info(f"Added new admin: {new_admin_id}")
            await update.message.reply_text(f"тЬЕ рокрпБродро┐роп admin роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {new_admin_id}")
    except ValueError:
        logging.warning(f"Invalid user ID provided for /addadmin: {context.args[0]}")
        await update.message.reply_text("тЪая╕П Invalid user ID. родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роОрогрпНрогрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.")

# --- /removeadmin <id> command ---
@restricted
async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """роЕроЯрпНрооро┐ройрпИ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /removeadmin command from user: {update.effective_user.id}. Args: {context.args}")
    if not context.args:
        await update.message.reply_text("тЪая╕П Usage: /removeadmin <user_id>")
        return

    try:
        rem_admin_id = int(context.args[0])
        if rem_admin_id in admin_ids:
            if len(admin_ids) == 1:
                logging.warning(f"Attempted to remove last admin: {rem_admin_id}")
                await update.message.reply_text("тЪая╕П роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН роТро░рпБ admin роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.")
            else:
                admin_ids.remove(rem_admin_id)
                logging.info(f"Removed admin: {rem_admin_id}")
                await update.message.reply_text(f"тЬЕ Admin роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {rem_admin_id}")
        else:
            logging.info(f"User {rem_admin_id} is not in admin list.")
            await update.message.reply_text("тЭМ User admin рокроЯрпНроЯро┐ропро▓ро┐ро▓рпН роЗро▓рпНро▓рпИ.")
    except ValueError:
        logging.warning(f"Invalid user ID provided for /removeadmin: {context.args[0]}")
        await update.message.reply_text("тЪая╕П Invalid user ID. родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роОрогрпНрогрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.")

# --- /edittitle command ---
@restricted
async def edittitle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯродрпН родро▓рпИрокрпНрокрпИ рооро╛ро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /edittitle command from user: {update.effective_user.id}. Args: {context.args}")
    args = context.args
    logging.info(f"Edittitle args: {args}")
    if len(args) < 1 or "|" not in " ".join(args):
        await update.message.reply_text("тЪая╕П Usage: `/edittitle <old title> | <new title>`", parse_mode="Markdown")
        return

    full_args = " ".join(args)
    old_title_raw, new_title_raw = map(lambda x: x.strip(), full_args.split("|", 1))
    
    cleaned_old_title = clean_title(old_title_raw)
    cleaned_new_title = clean_title(new_title_raw)

    logging.info(f"Edittitle parsed - Old Cleaned: '{cleaned_old_title}' (Raw: '{old_title_raw}'), New Cleaned: '{cleaned_new_title}' (Raw: '{new_title_raw}')")

    try:
        response = supabase.table("movies").update({"title": cleaned_new_title}).eq("title", cleaned_old_title).execute()
        
        logging.info(f"Supabase update response data: {response.data}")
        if response.error: # Changed from postgrest_error to error
            logging.error(f"Supabase update error details: {response.error}")
        else:
            logging.info("Supabase update operation completed without error.")

        if response.data:
            global movies_data
            movies_data = load_movies_data()
            logging.info(f"Title updated successfully for '{old_title_raw}' to '{new_title_raw}'.")
            await update.message.reply_text(f"тЬЕ *{old_title_raw.title()}* роЗройрпН родро▓рпИрокрпНрокрпБ, *{new_title_raw.title()}* роЖроХ рооро╛ро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ.", parse_mode="Markdown")
        else:
            logging.info(f"Movie '{old_title_raw}' not found for title edit.")
            await update.message.reply_text("тЭМ роЕроирпНродрокрпН рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокро┤рпИроп рокрпЖропро░рпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН.")
    except Exception as e:
        logging.error(f"тЭМ родро▓рпИрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐рокрпНрокрпБ рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ родро▓рпИрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        
# --- /deletemovie command ---
@restricted
async def deletemovie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯродрпНродрпИ роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /deletemovie command from user: {update.effective_user.id}. Args: {context.args}")
    args = context.args
    if not args:
        await update.message.reply_text("тЪая╕П Usage: `/deletemovie <movie name>`", parse_mode="Markdown")
        return

    title_raw = " ".join(args).strip()
    title_to_delete_cleaned = clean_title(title_raw)

    logging.info(f"Attempting to delete title: '{title_to_delete_cleaned}' (Raw: '{title_raw}')")

    try:
        # роирпАроХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХрпБроорпН роорпБройрпН, роЕроирпНродрокрпН рокроЯроорпН роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│родро╛ роОройрпНро▒рпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
        check_response = supabase.table("movies").select("title").eq("title", title_to_delete_cleaned).execute()
        
        if not check_response.data:
            logging.info(f"Movie '{title_to_delete_cleaned}' not found in DB for deletion.")
            await update.message.reply_text("тЭМ роЕроирпНродрокрпН рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокрпЖропро░рпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН.")
            return

        response = supabase.table("movies").delete().eq("title", title_to_delete_cleaned).execute()
        
        logging.info(f"Supabase delete response data: {response.data}")
        if response.error: # Changed from postgrest_error to error
            logging.error(f"Supabase delete error details: {response.error}")
        else:
            logging.info("Supabase delete operation completed without error.")

        if response.data:
            global movies_data
            movies_data = load_movies_data()
            logging.info(f"Movie '{title_raw}' deleted successfully.")
            await update.message.reply_text(f"тЬЕ *{title_raw.title()}* рокроЯродрпНродрпИ роирпАроХрпНроХро┐ро╡ро┐роЯрпНроЯрпЗройрпН.", parse_mode="Markdown")
        else:
            # роЗродрпБ рокрпКродрпБро╡ро╛роХ роироЯроХрпНроХро╛родрпБ, роПройрпЖройро┐ро▓рпН роиро╛роорпН роПро▒рпНроХройро╡рпЗ check_response роорпВро▓роорпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБро│рпНро│рпЛроорпН
            logging.error(f"Failed to delete movie '{title_raw}' despite being found.")
            await update.message.reply_text("тЭМ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ.")
    except Exception as e:
        logging.error(f"тЭМ роирпАроХрпНроХрпБродро▓рпН рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ DB-роЗро▓рпН роЗро░рпБроирпНродрпБ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- Pagination helpers ---
def get_total_movies_count() -> int:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        return response.count if response.count is not None else 0
    except Exception as e:
        logging.error(f"тЭМ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯ роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒ рокро┐ро┤рпИ: {e}")
        return 0

def load_movies_page(limit: int = 20, offset: int = 0) -> list:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓ро┐ройрпН роТро░рпБ рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("title").order("title", desc=False).range(offset, offset + limit - 1).execute()
        movies = response.data or []
        return [m['title'] for m in movies]
    except Exception as e:
        logging.error(f"тЭМ родро┐ро░рпИрокрпНрокроЯрокрпН рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ рокро┐ро┤рпИ: {e}")
        return []

# --- /movielist command ---
@restricted
async def movielist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /movielist command from user: {update.effective_user.id}.")
    user_id = update.message.from_user.id
    logging.info(f"User {user_id} requested /movielist command.") 

    page = 1
    if context.args:
        try:
            page = int(context.args[0])
            if page < 1:
                page = 1
        except ValueError:
            page = 1

    limit = 30
    offset = (page - 1) * limit

    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    logging.info(f"Movielist details - Page: {page}, Offset: {offset}, Total Movies: {total_movies}, Total Pages: {total_pages}, Movies on page: {len(movies)}")

    if not movies:
        logging.info("Movielist is empty for this page. Sending 'no movies' message.")
        await update.message.reply_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Sending movielist page {page} to user {user_id}.")
    await update.message.reply_text(text, reply_markup=reply_markup)

# movielist pagination callback
async def movielist_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпН рокроХрпНроХро╡ро╛роЯрпНроЯрпБ роХро┐ро│ро┐роХрпНроХрпБроХро│рпИроХрпН роХрпИропро╛ро│рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received movielist callback from user: {update.effective_user.id}. Query data: {update.callback_query.data}.")
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("movielist_"):
        logging.warning(f"Invalid movielist callback data: {data}")
        return

    page = int(data.split("_")[1])

    limit = 30
    offset = (page - 1) * limit
    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    if not movies:
        logging.info(f"Movielist is empty for page {page} in callback. Editing message.")
        await query.message.edit_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Editing movielist message to page {page} for user {update.effective_user.id}.")
    await query.message.edit_text(text, reply_markup=reply_markup)

# --- /status command ---
@restricted
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокро╛роЯрпНроЯро┐ройрпН роиро┐ро▓рпИ рооро▒рпНро▒рпБроорпН роЯрпЗроЯрпНроЯро╛рокрпЗро╕рпН родроХро╡ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /status command from user: {update.effective_user.id}.")
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        total_movies = response.count or 0

        db_size_mb = "N/A" 

        last_movie_resp = supabase.table("movies").select("title", "uploaded_at").order("id", desc=True).limit(1).execute()
        last = last_movie_resp.data[0] if last_movie_resp.data else None
        if last:
            last_title = last['title']
            last_upload_time = datetime.fromisoformat(last['uploaded_at'])
            time_ago = time_diff(last_upload_time)
        else:
            last_title = "None"
            time_ago = "N/A"

        text = (
            f"ЁЯУК Bot Status:\n"
            f"тАв Total Movies: {total_movies}\n"
            f"тАв Database Size: {db_size_mb}\n"
            f"тАв Last Upload: \"{last_title.title()}\" тАУ {time_ago}"
        )
        logging.info(f"Sending status info to user {update.effective_user.id}.")
        await update.message.reply_text(text)
    except Exception as e:
        logging.error(f"тЭМ Status рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ Status info рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- /adminpanel command ---
@restricted
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """роЕроЯрпНрооро┐ройрпН рокрпЗройро▓рпН родроХро╡ро▓рпНроХро│рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /adminpanel command from user: {update.effective_user.id}.")
    admin_list = "\n".join([f"ЁЯСд {admin_id}" for admin_id in admin_ids])
    logging.info(f"Sending admin panel info to user {update.effective_user.id}.")
    await update.message.reply_text(f"ЁЯЫая╕П *Admin Panel*\n\nЁЯУЛ *Admin IDs:*\n{admin_list}", parse_mode='Markdown')

# --- /addadmin <id> command ---
@restricted
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокрпБродро┐роп роЕроЯрпНрооро┐ройрпИроЪрпН роЪрпЗро░рпНроХрпНроХро┐ро▒родрпБ."""
    logging.info(f"Received /addadmin command from user: {update.effective_user.id}. Args: {context.args}")
    if not context.args:
        await update.message.reply_text("тЪая╕П Usage: /addadmin <user_id>")
        return

    try:
        new_admin_id = int(context.args[0])
        if new_admin_id in admin_ids:
            logging.info(f"User {new_admin_id} is already an admin.")
            await update.message.reply_text("тЪая╕П роЗроирпНрод user роПро▒рпНроХройро╡рпЗ роТро░рпБ admin.")
        else:
            admin_ids.add(new_admin_id)
            logging.info(f"Added new admin: {new_admin_id}")
            await update.message.reply_text(f"тЬЕ рокрпБродро┐роп admin роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {new_admin_id}")
    except ValueError:
        logging.warning(f"Invalid user ID provided for /addadmin: {context.args[0]}")
        await update.message.reply_text("тЪая╕П Invalid user ID. родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роОрогрпНрогрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.")

# --- /removeadmin <id> command ---
@restricted
async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """роЕроЯрпНрооро┐ройрпИ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /removeadmin command from user: {update.effective_user.id}. Args: {context.args}")
    if not context.args:
        await update.message.reply_text("тЪая╕П Usage: /removeadmin <user_id>")
        return

    try:
        rem_admin_id = int(context.args[0])
        if rem_admin_id in admin_ids:
            if len(admin_ids) == 1:
                logging.warning(f"Attempted to remove last admin: {rem_admin_id}")
                await update.message.reply_text("тЪая╕П роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН роТро░рпБ admin роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.")
            else:
                admin_ids.remove(rem_admin_id)
                logging.info(f"Removed admin: {rem_admin_id}")
                await update.message.reply_text(f"тЬЕ Admin роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {rem_admin_id}")
        else:
            logging.info(f"User {rem_admin_id} is not in admin list.")
            await update.message.reply_text("тЭМ User admin рокроЯрпНроЯро┐ропро▓ро┐ро▓рпН роЗро▓рпНро▓рпИ.")
    except ValueError:
        logging.warning(f"Invalid user ID provided for /removeadmin: {context.args[0]}")
        await update.message.reply_text("тЪая╕П Invalid user ID. родропро╡рпБроЪрпЖропрпНродрпБ роТро░рпБ роОрогрпНрогрпИ ро╡ро┤роЩрпНроХро╡рпБроорпН.")

# --- /edittitle command ---
@restricted
async def edittitle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯродрпН родро▓рпИрокрпНрокрпИ рооро╛ро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /edittitle command from user: {update.effective_user.id}. Args: {context.args}")
    args = context.args
    logging.info(f"Edittitle args: {args}")
    if len(args) < 1 or "|" not in " ".join(args):
        await update.message.reply_text("тЪая╕П Usage: `/edittitle <old title> | <new title>`", parse_mode="Markdown")
        return

    full_args = " ".join(args)
    old_title_raw, new_title_raw = map(lambda x: x.strip(), full_args.split("|", 1))
    
    cleaned_old_title = clean_title(old_title_raw)
    cleaned_new_title = clean_title(new_title_raw)

    logging.info(f"Edittitle parsed - Old Cleaned: '{cleaned_old_title}' (Raw: '{old_title_raw}'), New Cleaned: '{cleaned_new_title}' (Raw: '{new_title_raw}')")

    try:
        response = supabase.table("movies").update({"title": cleaned_new_title}).eq("title", cleaned_old_title).execute()
        
        logging.info(f"Supabase update response data: {response.data}")
        if response.error: # Changed from postgrest_error to error
            logging.error(f"Supabase update error details: {response.error}")
        else:
            logging.info("Supabase update operation completed without error.")

        if response.data:
            global movies_data
            movies_data = load_movies_data()
            logging.info(f"Title updated successfully for '{old_title_raw}' to '{new_title_raw}'.")
            await update.message.reply_text(f"тЬЕ *{old_title_raw.title()}* роЗройрпН родро▓рпИрокрпНрокрпБ, *{new_title_raw.title()}* роЖроХ рооро╛ро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ.", parse_mode="Markdown")
        else:
            logging.info(f"Movie '{old_title_raw}' not found for title edit.")
            await update.message.reply_text("тЭМ роЕроирпНродрокрпН рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокро┤рпИроп рокрпЖропро░рпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН.")
    except Exception as e:
        logging.error(f"тЭМ родро▓рпИрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐рокрпНрокрпБ рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ родро▓рпИрокрпНрокрпБ рокрпБродрпБрокрпНрокро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")
        
# --- /deletemovie command ---
@restricted
async def deletemovie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯродрпНродрпИ роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ роирпАроХрпНроХрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /deletemovie command from user: {update.effective_user.id}. Args: {context.args}")
    args = context.args
    if not args:
        await update.message.reply_text("тЪая╕П Usage: `/deletemovie <movie name>`", parse_mode="Markdown")
        return

    title_raw = " ".join(args).strip()
    title_to_delete_cleaned = clean_title(title_raw)

    logging.info(f"Attempting to delete title: '{title_to_delete_cleaned}' (Raw: '{title_raw}')")

    try:
        # роирпАроХрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХрпБроорпН роорпБройрпН, роЕроирпНродрокрпН рокроЯроорпН роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│родро╛ роОройрпНро▒рпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
        check_response = supabase.table("movies").select("title").eq("title", title_to_delete_cleaned).execute()
        
        if not check_response.data:
            logging.info(f"Movie '{title_to_delete_cleaned}' not found in DB for deletion.")
            await update.message.reply_text("тЭМ роЕроирпНродрокрпН рокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокрпЖропро░рпН роХрпКроЯрпБроХрпНроХро╡рпБроорпН.")
            return

        response = supabase.table("movies").delete().eq("title", title_to_delete_cleaned).execute()
        
        logging.info(f"Supabase delete response data: {response.data}")
        if response.error: # Changed from postgrest_error to error
            logging.error(f"Supabase delete error details: {response.error}")
        else:
            logging.info("Supabase delete operation completed without error.")

        if response.data:
            global movies_data
            movies_data = load_movies_data()
            logging.info(f"Movie '{title_raw}' deleted successfully.")
            await update.message.reply_text(f"тЬЕ *{title_raw.title()}* рокроЯродрпНродрпИ роирпАроХрпНроХро┐ро╡ро┐роЯрпНроЯрпЗройрпН.", parse_mode="Markdown")
        else:
            # роЗродрпБ рокрпКродрпБро╡ро╛роХ роироЯроХрпНроХро╛родрпБ, роПройрпЖройро┐ро▓рпН роиро╛роорпН роПро▒рпНроХройро╡рпЗ check_response роорпВро▓роорпН роЪро░ро┐рокро╛ро░рпНродрпНродрпБро│рпНро│рпЛроорпН
            logging.error(f"Failed to delete movie '{title_raw}' despite being found.")
            await update.message.reply_text("тЭМ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ.")
    except Exception as e:
        logging.error(f"тЭМ роирпАроХрпНроХрпБродро▓рпН рокро┐ро┤рпИ: {e}")
        await update.message.reply_text("тЭМ DB-роЗро▓рпН роЗро░рпБроирпНродрпБ роирпАроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.")

# --- Pagination helpers ---
def get_total_movies_count() -> int:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЙро│рпНро│ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("id", count="exact").execute()
        return response.count if response.count is not None else 0
    except Exception as e:
        logging.error(f"тЭМ роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯ роОрогрпНрогро┐роХрпНроХрпИропрпИрокрпН рокрпЖро▒ рокро┐ро┤рпИ: {e}")
        return 0

def load_movies_page(limit: int = 20, offset: int = 0) -> list:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕ро┐ро▓рпН роЗро░рпБроирпНродрпБ родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓ро┐ройрпН роТро░рпБ рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБроХро┐ро▒родрпБ."""
    try:
        response = supabase.table("movies").select("title").order("title", desc=False).range(offset, offset + limit - 1).execute()
        movies = response.data or []
        return [m['title'] for m in movies]
    except Exception as e:
        logging.error(f"тЭМ родро┐ро░рпИрокрпНрокроЯрокрпН рокроХрпНроХродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ рокро┐ро┤рпИ: {e}")
        return []

# --- /movielist command ---
@restricted
async def movielist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпИроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒родрпБ."""
    logging.info(f"Received /movielist command from user: {update.effective_user.id}.")
    user_id = update.message.from_user.id
    logging.info(f"User {user_id} requested /movielist command.") 

    page = 1
    if context.args:
        try:
            page = int(context.args[0])
            if page < 1:
                page = 1
        except ValueError:
            page = 1

    limit = 30
    offset = (page - 1) * limit

    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    logging.info(f"Movielist details - Page: {page}, Offset: {offset}, Total Movies: {total_movies}, Total Pages: {total_pages}, Movies on page: {len(movies)}")

    if not movies:
        logging.info("Movielist is empty for this page. Sending 'no movies' message.")
        await update.message.reply_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Sending movielist page {page} to user {user_id}.")
    await update.message.reply_text(text, reply_markup=reply_markup)

# movielist pagination callback
async def movielist_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """родро┐ро░рпИрокрпНрокроЯрокрпН рокроЯрпНроЯро┐ропро▓рпН рокроХрпНроХро╡ро╛роЯрпНроЯрпБ роХро┐ро│ро┐роХрпНроХрпБроХро│рпИроХрпН роХрпИропро╛ро│рпБроХро┐ро▒родрпБ."""
    logging.info(f"Received movielist callback from user: {update.effective_user.id}. Query data: {update.callback_query.data}.")
    query = update.callback_query
    await query.answer()
    data = query.data

    if not data.startswith("movielist_"):
        logging.warning(f"Invalid movielist callback data: {data}")
        return

    page = int(data.split("_")[1])

    limit = 30
    offset = (page - 1) * limit
    movies = load_movies_page(limit=limit, offset=offset)
    total_movies = get_total_movies_count()
    total_pages = (total_movies + limit - 1) // limit

    if not movies:
        logging.info(f"Movielist is empty for page {page} in callback. Editing message.")
        await query.message.edit_text("тЭМ роЗроирпНрод рокроХрпНроХродрпНродро┐ро▓рпН рокроЯроорпН роЗро▓рпНро▓рпИ.")
        return

    text = f"ЁЯОм Movies List - рокроХрпНроХроорпН {page}/{total_pages}\n\n"
    for i, title in enumerate(movies, start=offset + 1):
        text += f"{i}. {title.title()}\n"

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"movielist_{page - 1}"))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("Next тЮбя╕П", callback_data=f"movielist_{page + 1}"))

    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None
    logging.info(f"Editing movielist message to page {page} for user {update.effective_user.id}.")
    await query.message.edit_text(text, reply_markup=reply_markup)

# --- /restart command ---
@restricted
async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рокро╛роЯрпНроЯрпИ рооро▒рпБродрпКроЯроХрпНроХроорпН роЪрпЖропрпНроХро┐ро▒родрпБ."""
    logging.info(f"Received /restart command from user: {update.effective_user.id}. Initiating restart.")
    await update.message.reply_text("тЩ╗я╕П рокро╛роЯрпНроЯрпБ роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ (Koyeb роорпВро▓роорпН)...")
    sys.exit(0)

# --- Error Handler ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log the error and send a message to the user."""
    logging.error(f"Exception while handling an update: {context.error}", exc_info=True)
    
    # Send a generic error message to the user (optional, but good for user experience)
    if isinstance(update, Update) and update.effective_chat:
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="тЭМ роТро░рпБ рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роЕроЯрпНрооро┐ройрпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН."
            )
        except Exception as e:
            logging.error(f"Failed to send error message to user: {e}")

# --- Main function to setup bot ---
async def main():
    """рокро╛роЯрпНроЯрпИродрпН родрпКроЯроЩрпНроХро┐, роЕройрпИродрпНродрпБ ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпИропрпБроорпН рокродро┐ро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ."""
    # Network related settings added for stability
    app = ApplicationBuilder().token(TOKEN)\
        .http_version("1.1")\
        .http_connection_pool_size(50)\
        .read_timeout(30)\
        .write_timeout(30)\
        .connect_timeout(30)\
        .build()

    # рокрпКродрпБро╡ро╛рой Message Tracker роР роорпБродро▓ро┐ро▓рпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.
    # роЗродрпБ роЕройрпИродрпНродрпБ User роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпИропрпБроорпН (роХроЯрпНроЯро│рпИроХро│рпН, Text, Photos, Callbacks) рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроорпН.
    # родро┐ро░рпБродрпНродрокрпНрокроЯрпНроЯ Message-роХро│рпИродрпН родро╡ро┐ро░рпНрокрпНрокродрпБ, роТро░рпЗ Message-роР рокро▓роорпБро▒рпИ рокродро┐ро╡рпБ роЪрпЖропрпНро╡родрпИродрпН родроЯрпБроХрпНроХрпБроорпН.
    app.add_handler(MessageHandler(filters.ALL & ~filters.UpdateType.EDITED_MESSAGE, general_message_tracker))

    # роХроЯрпНроЯро│рпИроХро│рпИрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addmovie", addmovie))
    app.add_handler(CommandHandler("deletemovie", deletemovie))
    app.add_handler(CommandHandler("edittitle", edittitle))
    app.add_handler(CommandHandler("movielist", movielist))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("adminpanel", admin_panel))
    app.add_handler(CommandHandler("addadmin", add_admin))
    app.add_handler(CommandHandler("removeadmin", remove_admin))
    app.add_handler(CommandHandler("restart", restart_bot))
    app.add_handler(CommandHandler("totalusers", total_users_command))

    # роГрокрпИро▓рпН рокродро┐ро╡рпЗро▒рпНро▒ ро╣рпЗрогрпНроЯрпНро▓ро░рпН
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, save_file))

    # родро┐ро░рпИрокрпНрокроЯродрпН родрпЗроЯро▓рпН роЯрпЖроХрпНро╕рпНроЯрпН ро╣рпЗрогрпНроЯрпНро▓ро░рпН (роХроЯрпНроЯро│рпИроХро│рпН родро╡ро┐ро░рпНродрпНродрпБ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_movie))

    # Callback ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпН (handle_resolution_click роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ, роПройрпЖройро┐ро▓рпН Deep Link рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ)
    # app.add_handler(CallbackQueryHandler(handle_resolution_click, pattern=r"^res\|")) # роЗроирпНрод ро╡ро░ро┐ роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ
    app.add_handler(CallbackQueryHandler(movie_button_click, pattern=r"^movie\|"))
    app.add_handler(CallbackQueryHandler(movielist_callback, pattern=r"^movielist_"))

    # Error Handler роРрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН (роЕройрпИродрпНродрпБ рокро┐ро┤рпИроХро│рпИропрпБроорпН рокро┐роЯро┐роХрпНроХ)
    app.add_error_handler(error_handler) # роЗроирпНрод ро╡ро░ро┐ роорпБроХрпНроХро┐ропроорпН

    logging.info("ЁЯЪА рокро╛роЯрпН родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
