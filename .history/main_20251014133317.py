import logging
import asyncio
import nest_asyncio
import unicodedata
import re
import sys
import os
import time
import telegram
from rapidfuzz import process
from dotenv import load_dotenv
from functools import wraps
from supabase.client import create_client, Client
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ==================== CONFIGURATION ====================
class BotConfig:
    """роХро╛ройрпНроГрокро┐роХрпБро░рпЗро╖ройрпН роЪрпЖроЯрпНроЯро┐роЩрпНро╕рпН"""
    def __init__(self):
        load_dotenv()
        nest_asyncio.apply()
        
        self.TOKEN = os.getenv("TOKEN")
        self.SUPABASE_URL = os.getenv("SUPABASE_URL")
        self.SUPABASE_KEY = os.getenv("SUPABASE_KEY")
        self.PRIVATE_CHANNEL_LINK = os.getenv("PRIVATE_CHANNEL_LINK")
        
        self.ADMIN_IDS = self._parse_admin_ids()
        self.CHANNEL_IDS = self._parse_channel_ids()
        
        self.setup_logging()
    
    def _parse_admin_ids(self):
        """роЕроЯрпНрооро┐ройрпН роРроЯро┐роХро│рпИ рокро╛ро░рпНроХрпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        admin_ids_str = os.getenv("ADMIN_IDS", "")
        return set(map(int, filter(None, admin_ids_str.split(","))))
    
    def _parse_channel_ids(self):
        """роЪрпЗройро▓рпН роРроЯро┐роХро│рпИ рокро╛ро░рпНроХрпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        return {
            'skmovies': int(os.getenv("SKMOVIES_GROUP_ID")),
            'discussion': int(os.getenv("SKMOVIESDISCUSSION_GROUP_ID")),
            'updates': int(os.getenv("MOVIE_UPDATE_CHANNEL_ID"))
        }
    
    def setup_logging(self):
        """ро▓ро╛роХрпНроХро┐роЩрпН роЪрпЖроЯрпНроЯрокрпН"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

# ==================== DATABASE MANAGER ====================
class DatabaseManager:
    """роЯрпЗроЯрпНроЯро╛рокрпЗро╕рпН роорпЗройрпЗроЬрпНроорпЖрогрпНроЯрпН"""
    
    def __init__(self, config: BotConfig):
        self.config = config
        self.client = self._initialize_client()
        self.movies_data = self.load_movies_data()
    
    def _initialize_client(self):
        """Supabase роХро┐ро│рпИропрогрпНроЯрпН роЗройро┐ро╖ро┐ропро▓рпИро╕рпН"""
        try:
            client = create_client(self.config.SUPABASE_URL, self.config.SUPABASE_KEY)
            logging.info("тЬЕ Supabase роХро┐ро│рпИропрогрпНроЯрпН родрпКроЯроЩрпНроХрокрпНрокроЯрпНроЯродрпБ")
            return client
        except Exception as e:
            logging.error(f"тЭМ Supabase роХро┐ро│рпИропрогрпНроЯрпН рокро┐ро┤рпИ: {e}")
            sys.exit(1)
    
    def load_movies_data(self):
        """родро┐ро░рпИрокрпНрокроЯ родро░ро╡рпИ ро▓рпЛроЯрпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        try:
            response = self.client.table("movies").select("*").execute()
            movies = response.data or []
            
            movies_data = {}
            for movie in movies:
                cleaned_title = self.clean_title(movie['title'])
                movies_data[cleaned_title] = {
                    'poster_url': movie['poster_url'],
                    'files': {
                        '480p': movie['file_480p'],
                        '720p': movie['file_720p'],
                        '1080p': movie['file_1080p'],
                    }
                }
            
            logging.info(f"тЬЕ {len(movies_data)} родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│рпН ро▓рпЛроЯрпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯрой")
            return movies_data
        except Exception as e:
            logging.error(f"тЭМ родро┐ро░рпИрокрпНрокроЯ родро░ро╡рпБ ро▓рпЛроЯрпН рокро┐ро┤рпИ: {e}")
            return {}
    
    @staticmethod
    def clean_title(title: str) -> str:
        """родро▓рпИрокрпНрокрпИ роЪрпБродрпНродроорпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        cleaned = title.lower()
        cleaned = ''.join(c for c in cleaned if unicodedata.category(c)[0] not in ['S', 'C'])
        cleaned = re.sub(r'[^\w\s\(\)]', '', cleaned)
        cleaned = re.sub(r'\s+', ' ', cleaned).strip()
        return cleaned
    
    def extract_title(self, filename: str) -> str:
        """роХрпЛрокрпНрокрпБ рокрпЖропро░ро┐ро▓ро┐ро░рпБроирпНродрпБ родро▓рпИрокрпНрокрпИ роОроХрпНро╕рпНроЯрпНро░ро╛роХрпНроЯрпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        # роГрокрпИро▓рпН рокрпЖропро░рпН роХро┐ро│рпАройро┐роЩрпН ро▓ро╛роЬро┐роХрпН
        filename = re.sub(r"@\S+", "", filename)
        filename = re.sub(r"\b(480p|720p|1080p|x264|x265|HEVC|HDRip|WEBRip|AAC)\b", "", filename, flags=re.IGNORECASE)
        filename = re.sub(r"[\[\]\(\)\{\}]", " ", filename)
        filename = re.sub(r"\s+", " ", filename).strip()

        match = re.search(r"([a-zA-Z\s]+)(?:\(?)(20\d{2})(?:\)?)", filename)
        if match:
            return f"{match.group(1).strip()} ({match.group(2)})"
        
        title = re.split(r"[-0-9]", filename)[0].strip()
        return title

# ==================== UTILITY FUNCTIONS ====================
class BotUtils:
    """рокропройрпНрокро╛роЯрпНроЯрпБ роЪрпЖропро▓рпНрокро╛роЯрпБроХро│рпН"""
    
    @staticmethod
    def time_diff(dt):
        """роирпЗро░ ро╡ро┐родрпНродро┐ропро╛роЪродрпНродрпИ роХрогроХрпНроХро┐роЯрпБроХро┐ро▒родрпБ"""
        now = datetime.now(timezone.utc)
        diff = now - dt.replace(tzinfo=timezone.utc)
        seconds = int(diff.total_seconds())

        if seconds < 60:
            return f"{seconds} ро╡ро┐ройро╛роЯро┐роХро│рпН роорпБройрпНрокрпБ"
        minutes = seconds // 60
        if minutes < 60:
            return f"{minutes} роиро┐рооро┐роЯроЩрпНроХро│рпН роорпБройрпНрокрпБ"
        hours = minutes // 60
        if hours < 24:
            return f"{hours} роорогро┐роирпЗро░роорпН роорпБройрпНрокрпБ"
        days = hours // 24
        return f"{days} роиро╛роЯрпНроХро│рпН роорпБройрпНрокрпБ"
    
    @staticmethod
    async def delete_after_delay(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int = 600):
        """родро╛роородродрпНродро┐ро▒рпНроХрпБрокрпН рокро┐ро▒роХрпБ роЪрпЖропрпНродро┐ропрпИ роирпАроХрпНроХрпБроХро┐ро▒родрпБ"""
        await asyncio.sleep(delay)
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            logging.info(f"тЬЕ роЪрпЖропрпНродро┐ роирпАроХрпНроХрокрпНрокроЯрпНроЯродрпБ: {message_id}")
        except Exception as e:
            logging.warning(f"тЪая╕П роЪрпЖропрпНродро┐ роирпАроХрпНроХ рокро┐ро┤рпИ: {e}")

# ==================== DECORATORS ====================
def restricted(func):
    """роЕроЯрпНрооро┐ройрпН роороЯрпНроЯрпБроорпЗ роЕрогрпБроХ роЕройрпБроородро┐роХрпНроХрпБроорпН роЯрпЖроХрпНроХро░рпЗроЯрпНроЯро░рпН"""
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in context.bot_data['config'].ADMIN_IDS:
            await update.message.reply_text("тЭМ роЗроирпНрод роХроЯрпНроЯро│рпИ роЕроЯрпНрооро┐ройрпНроХро│рпБроХрпНроХрпБ роороЯрпНроЯрпБроорпЗ")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# ==================== MESSAGE HANDLERS ====================
class MessageHandlers:
    """роЪрпЖропрпНродро┐ ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпН"""
    
    def __init__(self, config: BotConfig, db: DatabaseManager):
        self.config = config
        self.db = db
        self.user_files = {}
        self.pending_requests = {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """/start роХроЯрпНроЯро│рпИ"""
        user = update.effective_user
        await self._track_user(user)
        
        welcome_text = (
            f"ро╡рогроХрпНроХроорпН {user.first_name}! ЁЯСЛ\n\n"
            "ЁЯОм ро▓рпЗроЯрпНроЯро╕рпНроЯрпН 2025 HD родрооро┐ро┤рпН рокроЯроЩрпНроХро│рпН ро╡рпЗрогрпНроЯрпБрооро╛? тЬи\n"
            "ро╡ро┐ро│роорпНрокро░рооро┐ро▓рпНро▓ро╛ роЙроЯройроЯро┐ родрпЗроЯро▓рпБроЯройрпН, родро░рооро╛рой роЪро┐ройро┐рооро╛ роЕройрпБрокро╡роорпН роЗроЩрпНроХрпЗ! ЁЯН┐\n\n"
            "ЁЯОм родропро╡рпБроЪрпЖропрпНродрпБ родро┐ро░рпИрокрпНрокроЯродрпНродро┐ройрпН рокрпЖропро░рпИ роЯрпИрокрпН роЪрпЖропрпНродрпБ роЕройрпБрокрпНрокрпБроЩрпНроХро│рпН!"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """роЙро░рпИ роЪрпЖропрпНродро┐роХро│рпИ роХрпИропро╛ро│рпНроХро┐ро▒родрпБ"""
        search_query = update.message.text.strip()
        await self._search_and_send_movies(update, search_query)
    
    async def _search_and_send_movies(self, update: Update, search_query: str):
        """родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│рпИ родрпЗроЯро┐ роЕройрпБрокрпНрокрпБроХро┐ро▒родрпБ"""
        cleaned_query = self.db.clean_title(search_query)
        movie_titles = list(self.db.movies_data.keys())
        
        matches = process.extract(cleaned_query, movie_titles, score_cutoff=80)
        
        if not matches:
            await self._show_suggestions(update, cleaned_query, movie_titles)
        elif len(matches) == 1 and matches[0][1] >= 95:
            await self._send_movie_poster(update.message, matches[0][0], update._context)
        else:
            await self._show_matches(update, matches)
    
    async def _send_movie_poster(self, message: Message, movie_key: str, context: ContextTypes.DEFAULT_TYPE):
        """родро┐ро░рпИрокрпНрокроЯ рокрпЛро╕рпНроЯро░рпН роЕройрпБрокрпНрокрпБроХро┐ро▒родрпБ"""
        movie = self.db.movies_data.get(movie_key)
        if not movie:
            await message.reply_text("тЭМ родро┐ро░рпИрокрпНрокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ")
            return
        
        caption = self._create_movie_caption(movie_key)
        keyboard = self._create_resolution_buttons(movie_key)
        
        try:
            sent_msg = await message.reply_photo(
                movie["poster_url"],
                caption=caption,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            asyncio.create_task(
                BotUtils.delete_after_delay(context, message.chat_id, sent_msg.message_id)
            )
        except Exception as e:
            logging.error(f"тЭМ рокрпЛро╕рпНроЯро░рпН роЕройрпБрокрпНрок рокро┐ро┤рпИ: {e}")
            await message.reply_text("тЪая╕П рокрпЛро╕рпНроЯро░рпН роЕройрпБрокрпНрок роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ")
    
    def _create_movie_caption(self, movie_key: str) -> str:
        """родро┐ро░рпИрокрпНрокроЯ ро╡ро┐ро╡ро░роорпН роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ"""
        return (
            f"ЁЯОм *{movie_key.title()}*\n\n"
            f"ЁЯСЙ <a href='{self.config.PRIVATE_CHANNEL_LINK}'>SK Movies Updates ЁЯФФ</a> - "
            "рокрпБродро┐роп рокроЯроЩрпНроХро│рпН, роЕрокрпНроЯрпЗроЯрпНроХро│рпН роЕройрпИродрпНродрпБроорпН роЗроЩрпНроХрпЗ!"
        )
    
    def _create_resolution_buttons(self, movie_key: str) -> list:
        """ро░рпЖроЪро▓рпВро╖ройрпН рокроЯрпНроЯройрпНроХро│рпН роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ"""
        return [[
            InlineKeyboardButton("480p", callback_data=f"res|{movie_key}|480p"),
            InlineKeyboardButton("720p", callback_data=f"res|{movie_key}|720p"), 
            InlineKeyboardButton("1080p", callback_data=f"res|{movie_key}|1080p"),
        ]]
    
    async def _track_user(self, user: telegram.User):
        """рокропройро░рпН родроХро╡ро▓рпИ роЯро┐ро░ро╛роХрпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        try:
            # рокропройро░рпН роЯро┐ро░ро╛роХрпНроХро┐роЩрпН ро▓ро╛роЬро┐роХрпН
            user_data = {
                "user_id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "joined_at": datetime.utcnow().isoformat()
            }
            # Supabase-ро▓рпН роЪрпЗрооро┐роХрпНроХро╡рпБроорпН
            logging.info(f"тЬЕ рокропройро░рпН роЯро┐ро░ро╛роХрпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯро╛ро░рпН: {user.id}")
        except Exception as e:
            logging.error(f"тЭМ рокропройро░рпН роЯро┐ро░ро╛роХрпНроХро┐роЩрпН рокро┐ро┤рпИ: {e}")

# ==================== MAIN BOT CLASS ====================
class MovieBot:
    """роорпБроХрпНроХро┐роп рокро╛роЯрпН роХро┐ро│ро╛ро╕рпН"""
    
    def __init__(self):
        self.config = BotConfig()
        self.db = DatabaseManager(self.config)
        self.handlers = MessageHandlers(self.config, self.db)
        self.app = None
    
    async def initialize(self):
        """рокро╛роЯрпНроЯрпИ роЗройро┐ро╖ро┐ропро▓рпИро╕рпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        self.app = ApplicationBuilder().token(self.config.TOKEN).build()
        self._setup_handlers()
        
        # роХрпНро│рпЛрокро▓рпН роЯрпЗроЯрпНроЯро╛
        self.app.bot_data['config'] = self.config
        self.app.bot_data['db'] = self.db
    
    def _setup_handlers(self):
        """роОро▓рпНро▓ро╛ ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпИропрпБроорпН роЪрпЖроЯрпНроЯрокрпН роЪрпЖропрпНроХро┐ро▒родрпБ"""
        # роХроЯрпНроЯро│рпИ ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпН
        self.app.add_handler(CommandHandler("start", self.handlers.start_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        
        # роЪрпЖропрпНродро┐ ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпН
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handlers.handle_text_message
        ))
        
        # роХро╛ро▓рпНрокрпЗроХрпН ро╣рпЗрогрпНроЯрпНро▓ро░рпНроХро│рпН
        self.app.add_handler(CallbackQueryHandler(
            self.handle_resolution_click, pattern=r"^res\|"
        ))
    
    @restricted
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """/status роХроЯрпНроЯро│рпИ"""
        try:
            response = context.bot_data['db'].client.table("movies").select("id", count="exact").execute()
            total_movies = response.count or 0
            
            status_text = (
                f"ЁЯУК *рокро╛роЯрпН роиро┐ро▓рпИ:*\n"
                f"----------------------------------\n"
                f"тАв роорпКродрпНрод родро┐ро░рпИрокрпНрокроЯроЩрпНроХро│рпН: `{total_movies}`\n"
                f"тАв родро┐ро░рпИрокрпНрокроЯ родро░ро╡рпБ: `{len(context.bot_data['db'].movies_data)}`\n"
                f"тАв роЕроЯрпНрооро┐ройрпНроХро│рпН: `{len(context.bot_data['config'].ADMIN_IDS)}`"
            )
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
        except Exception as e:
            logging.error(f"тЭМ Status рокро┐ро┤рпИ: {e}")
            await update.message.reply_text("тЭМ роиро┐ро▓рпИ родроХро╡ро▓рпИрокрпН рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ")
    
    async def handle_resolution_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ро░рпЖроЪро▓рпВро╖ройрпН роХро┐ро│ро┐роХрпН роХрпИропро╛ро│рпБродро▓рпН"""
        query = update.callback_query
        await query.answer()
        
        _, movie_key, resolution = query.data.split("|", 2)
        await self._send_movie_file(query, movie_key, resolution, context)
    
    async def _send_movie_file(self, query, movie_key: str, resolution: str, context: ContextTypes.DEFAULT_TYPE):
        """родро┐ро░рпИрокрпНрокроЯ роХрпЛрокрпНрокрпИ роЕройрпБрокрпНрокрпБроХро┐ро▒родрпБ"""
        movie = self.db.movies_data.get(movie_key)
        if not movie:
            await query.message.reply_text("тЭМ родро┐ро░рпИрокрпНрокроЯроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ")
            return
        
        file_id = movie['files'].get(resolution)
        if not file_id:
            await query.message.reply_text("тЪая╕П роЗроирпНрод ро░рпЖроЪро▓рпВро╖ройро┐ро▓рпН роХрпЛрокрпНрокрпБ роЗро▓рпНро▓рпИ")
            return
        
        try:
            caption = (
                f"ЁЯОм *{movie_key.title()}* - {resolution}p\n\n"
                f"ЁЯСЙ <a href='{self.config.PRIVATE_CHANNEL_LINK}'>SK Movies Updates ЁЯФФ</a>\n\n"
                f"тЪая╕П роЗроирпНрод роХрпЛрокрпНрокрпБ 10 роиро┐рооро┐роЯроЩрпНроХро│ро┐ро▓рпН роирпАроХрпНроХрокрпНрокроЯрпБроорпН"
            )
            
            sent_msg = await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file_id,
                caption=caption,
                parse_mode="HTML"
            )
            
            asyncio.create_task(
                BotUtils.delete_after_delay(context, sent_msg.chat_id, sent_msg.message_id)
            )
        except Exception as e:
            logging.error(f"тЭМ роХрпЛрокрпНрокрпБ роЕройрпБрокрпНрок рокро┐ро┤рпИ: {e}")
            await query.message.reply_text("тЪая╕П роХрпЛрокрпНрокрпИ роЕройрпБрокрпНрок роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ")
    
    async def run(self):
        """рокро╛роЯрпНроЯрпИ роЗропроХрпНроХрпБроХро┐ро▒родрпБ"""
        if not self.app:
            await self.initialize()
        
        logging.info("ЁЯЪА родро┐ро░рпИрокрпНрокроЯ рокро╛роЯрпН родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ...")
        await self.app.run_polling()

# ==================== MAIN EXECUTION ====================
async def main():
    """роорпБроХрпНроХро┐роп роЪрпЖропро▓рпНрокро╛роЯрпБ"""
    bot = MovieBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())